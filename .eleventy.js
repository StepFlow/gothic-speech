const inspect = require("util").inspect;
const postcss = require("postcss");
const postcssImport = require("postcss-import");
const postcssMediaMinmax = require("postcss-media-minmax");
const autoprefixer = require("autoprefixer");
const postcssCsso = require("postcss-csso");
const esbuild = require("esbuild");
const htmlmin = require("html-minifier");
const { EleventyHtmlBasePlugin } = require("@11ty/eleventy");

module.exports = function (config) {
  config.addTransform("html-minify", (content, path) => {
    if (path && path.endsWith(".html")) {
      return htmlmin.minify(content, {
        collapseBooleanAttributes: true,
        collapseWhitespace: true,
        decodeEntities: true,
        includeAutoGeneratedTags: false,
        removeComments: true,
      });
    }

    return content;
  });

  config.addTemplateFormats("css");

  config.addExtension("css", {
    outputFileExtension: "css",
    compile: async (content, path) => {
      if (path !== "./src/styles/index.css") {
        return;
      }

      return async () => {
        let output = await postcss([
          postcssImport,
          postcssMediaMinmax,
          autoprefixer,
          postcssCsso,
        ]).process(content, {
          from: path,
        });

        return output.css;
      };
    },
  });

  config.addTemplateFormats("js");

  config.addExtension("js", {
    outputFileExtension: "js",
    compile: async (content, path) => {
      if (path !== "./src/scripts/index.js") {
        return;
      }

      return async () => {
        let output = await esbuild.build({
          target: "es2020",
          entryPoints: [path],
          minify: true,
          bundle: true,
          write: false,
        });

        return output.outputFiles[0].text;
      };
    },
  });

  config.addFilter("debug", (content) => `<pre>${inspect(content)}</pre>`);

  config.addPlugin(EleventyHtmlBasePlugin);

  return {
    dir: {
      input: "src",
      output: "dist",
    },
  };
};
